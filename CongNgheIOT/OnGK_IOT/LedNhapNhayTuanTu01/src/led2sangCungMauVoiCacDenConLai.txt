#include "hal_data.h"
#include "stdio.h"

void console_write(const char *buffer);

static volatile bool is_transfer_complete = false;
extern bsp_leds_t g_bsp_leds;

void hal_entry (void)
{
    const bsp_delay_units_t bsp_delay_units = BSP_DELAY_UNITS_MILLISECONDS;
    const uint32_t freq_in_hz = 1;
    const uint32_t delay = bsp_delay_units / freq_in_hz;

    bsp_leds_t leds = g_bsp_leds;

    if (0 == leds.led_count)
    {
        while (1) { ; } // Không có đèn LED trên bo mạch
    }

//    char red_buffer[200] = {};
//    sprintf(red_buffer, "RED\r\n");
//    char blue_buffer[200] = {};
//    sprintf(blue_buffer, "BLUE\r\n");
//    char green_buffer[200] = {};
//    sprintf(green_buffer, "GREEN\r\n");

    while (1)
    {
        R_BSP_PinAccessEnable();

        for (uint32_t i = 0; i < 3; i++)
        {
            uint32_t pin = leds.p_leds[i];
            uint32_t pin_xxx = leds.p_leds[i + 3];

            R_BSP_PinWrite((bsp_io_port_pin_t) pin, BSP_IO_LEVEL_HIGH);
            R_BSP_PinWrite((bsp_io_port_pin_t) pin_xxx, BSP_IO_LEVEL_LOW);
//
//            if (i == 0) {
//                console_write(red_buffer);
//            }
//            else if (i == 1) {
//                console_write(green_buffer);
//            }
//            else if (i == 2) {
//                console_write(blue_buffer);
//            }

            R_BSP_SoftwareDelay(delay, bsp_delay_units);

            R_BSP_PinWrite((bsp_io_port_pin_t) pin, BSP_IO_LEVEL_LOW);
            R_BSP_PinWrite((bsp_io_port_pin_t) pin_xxx, BSP_IO_LEVEL_HIGH);
        }

        R_BSP_PinAccessDisable();
    }
}


