#include "hal_data.h"
#include "stdio.h"
#include "string.h"

// Khai báo các hàm và biến
void R_BSP_WarmStart(bsp_warm_start_event_t event);
void user_uart_callback(uart_callback_args_t *p_args);
void console_write(const char *buffer);
void console_read(char *buffer, uint32_t length);

static volatile bool is_transfer_complete = false;

extern bsp_leds_t g_bsp_leds;


void hal_entry (void)
{
#if BSP_TZ_SECURE_BUILD
    R_BSP_NonSecureEnter();
#endif

    // Mở UART
    R_SCI_UART_Open(&g_uart0_ctrl, &g_uart0_cfg);

    char write_buffer[200] = {};
    char input_buffer[3] = {}; // Buffer để nhận số từ người dùng
    int n = 0;

    /* Define the units to be used with the software delay function */
    const bsp_delay_units_t bsp_delay_units = BSP_DELAY_UNITS_MILLISECONDS;

    /* Set the delay time */
    const uint32_t delay = 1000;  // 1 second

    /* LED structure */
    bsp_leds_t leds = g_bsp_leds;

    /* If no LEDs available, halt execution */
    if (0 == leds.led_count)
    {
        while (1) { ; }
    }


    while(1)
    {
        R_BSP_PinAccessEnable(); // Enable access to the PFS registers
        // Yêu cầu nhập số n
        sprintf(write_buffer, "\r\nNhap so pin led can bat (n): ");
        console_write(write_buffer);

        // Đọc số n từ người dùng
        console_read(input_buffer, 2);
        input_buffer[2] = '\0';
        n = atoi(input_buffer);

        /* Cycle through each LED */

        if (n < 3){
            uint32_t i = n;
                {
                  uint32_t pin = leds.p_leds[i];

                  /* Turn on the LED */
                  R_BSP_PinWrite((bsp_io_port_pin_t) pin, BSP_IO_LEVEL_HIGH);

                  /* Delay */
                  R_BSP_SoftwareDelay(delay, bsp_delay_units);

                  /* Turn off the LED */
                  R_BSP_PinWrite((bsp_io_port_pin_t) pin, BSP_IO_LEVEL_LOW);
              }
        }
        else{
            uint32_t i = n;

             {
                  uint32_t pin = leds.p_leds[i];

                  /* Turn on the LED */
                  R_BSP_PinWrite((bsp_io_port_pin_t) pin, BSP_IO_LEVEL_LOW);

                  /* Delay */
                  R_BSP_SoftwareDelay(delay, bsp_delay_units);

                  /* Turn off the LED */
                  R_BSP_PinWrite((bsp_io_port_pin_t) pin, BSP_IO_LEVEL_HIGH);
              }
        }
        R_BSP_SoftwareDelay(1000, BSP_DELAY_UNITS_MILLISECONDS); // Đợi một khoảng thời gian trước khi tiếp tục

        R_BSP_PinAccessDisable(); // Protect PFS registers
    }
}

// Hàm khởi động
void R_BSP_WarmStart (bsp_warm_start_event_t event)
{
    if (BSP_WARM_START_RESET == event)
    {
#if BSP_FEATURE_FLASH_LP_VERSION != 0
        R_FACI_LP->DFLCTL = 1U;
#endif
    }

    if (BSP_WARM_START_POST_C == event)
    {
        R_IOPORT_Open(&IOPORT_CFG_CTRL, &IOPORT_CFG_NAME);
    }
}

// Callback cho UART
void user_uart_callback(uart_callback_args_t *p_args)
{
    switch (p_args->event){
        case UART_EVENT_TX_COMPLETE:
        case UART_EVENT_RX_COMPLETE:
        {
            is_transfer_complete = true;
            break;
        }
        default:
        {
        }
    }
}

// Hàm ghi dữ liệu ra console
void console_write(const char *buffer){
    is_transfer_complete = false;
    R_SCI_UART_Write(&g_uart0_ctrl, (uint8_t *) buffer, strlen(buffer));
    while (!is_transfer_complete){
        R_BSP_SoftwareDelay(1, BSP_DELAY_UNITS_MICROSECONDS);
    }
}

// Hàm đọc dữ liệu từ console
void console_read(char *buffer, uint32_t length){
    is_transfer_complete = false;
    R_SCI_UART_Read(&g_uart0_ctrl, (uint8_t *) buffer, length);
    while (!is_transfer_complete){
        R_BSP_SoftwareDelay(1, BSP_DELAY_UNITS_MICROSECONDS);
    }
}
